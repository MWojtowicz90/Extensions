using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;

public static class ExtensionMethods 
{
	/// <summary>
	/// Determines if an animator contains a certain parameter, based on a type and a name
	/// </summary>
	public static bool HasParameterOfType (this Animator self, string name, AnimatorControllerParameterType type) 
	{
		if (name == null || name == "") { return false; }
		AnimatorControllerParameter[] parameters = self.parameters;
		foreach (AnimatorControllerParameter currParam in parameters) 
		{
			if (currParam.type == type && currParam.name == name) 
			{
				return true;
			}
		}
		return false;
    }

    /// <summary>
    /// Returns true if a renderer is visible from a camera
    /// </summary>
    public static bool IsVisibleFrom(this Renderer renderer, Camera camera)
    {
        Plane[] frustumPlanes = GeometryUtility.CalculateFrustumPlanes(camera);
        return GeometryUtility.TestPlanesAABB(frustumPlanes, renderer.bounds);
    }

    /// <summary>
    /// Returns true if this rectangle intersects the other specified rectangle
    /// </summary>
    public static bool Intersects(this Rect thisRectangle, Rect otherRectangle)
    {
        return !((thisRectangle.x > otherRectangle.xMax) || (thisRectangle.xMax < otherRectangle.x) || (thisRectangle.y > otherRectangle.yMax) || (thisRectangle.yMax < otherRectangle.y));
    }

    /// <summary>
    /// Returns bool if layer is within layermask
    /// </summary>
    public static bool Contains(this LayerMask mask, int layer) 
    {
            return ((mask.value & (1 << layer)) > 0);
    }
         
    /// <summary>
    /// Returns true if gameObject is within layermask
    /// </summary>
	public static bool Contains(this LayerMask mask, GameObject gameobject) 
    {
            return ((mask.value & (1 << gameobject.layer)) > 0);
    }

	static List<Component> m_ComponentCache = new List<Component>();

    /// <summary>
    /// Grabs a component without allocating memory uselessly
    /// </summary>
	public static Component GetComponentNoAlloc(this GameObject @this, System.Type componentType) 
	{ 
		@this.GetComponents(componentType, m_ComponentCache); 
		var component = m_ComponentCache.Count > 0 ? m_ComponentCache[0] : null; 
		m_ComponentCache.Clear(); 
		return component; 
	} 

    /// <summary>
    /// Grabs a component without allocating memory uselessly
    /// </summary>
	public static T GetComponentNoAlloc<T>(this GameObject @this) where T : Component
	{
		@this.GetComponents(typeof(T), m_ComponentCache);
		var component = m_ComponentCache.Count > 0 ? m_ComponentCache[0] : null;
		m_ComponentCache.Clear();
		return component as T;
	}

    /// <summary>
    /// Rotates a vector2 by angleInDegrees
    /// </summary>
    public static Vector2 Rotate(this Vector2 vector, float angleInDegrees)
    {
        float sin = Mathf.Sin(angleInDegrees * Mathf.Deg2Rad);
        float cos = Mathf.Cos(angleInDegrees * Mathf.Deg2Rad);
        float tx = vector.x;
        float ty = vector.y;
        vector.x = (cos * tx) - (sin * ty);
        vector.y = (sin * tx) + (cos * ty);
        return vector;
    }
        
    /// <summary>
    /// Normalizes an angle in degrees
    /// </summary>
    public static float NormalizeAngle(this float angleInDegrees)
    {
        angleInDegrees = angleInDegrees % 360f;
        if (angleInDegrees < 0)
        {
            angleInDegrees += 360f;
        }                
        return angleInDegrees;
    }

    /// <summary>
    /// Destroys a transform's children
    /// </summary>
    public static void DestroyAllChildren(this Transform transform)
    {
        for (int t = transform.childCount - 1; t >= 0; t--)
        {
            if (Application.isPlaying)
            {
                UnityEngine.Object.Destroy(transform.GetChild(t).gameObject);
            }
            else
            {
                UnityEngine.Object.DestroyImmediate(transform.GetChild(t).gameObject);
            }
        }
    }

    /// <summary>
    /// Scrolls a scroll rect to the top
    /// </summary>
    public static void ScrollToTop(this ScrollRect scrollRect)
    {
        scrollRect.normalizedPosition = new Vector2(0, 1);
    }

    /// <summary>
    /// Scrolls a scroll rect to the bottom
    /// </summary>
    public static void ScrollToBottom(this ScrollRect scrollRect)
    {
        scrollRect.normalizedPosition = new Vector2(0, 0);
    }

    /// <summary>
    /// Calculates objects parabola trajectory
    /// </summary>
    public static Vector3 CalculateTrajectory(Vector3 target, Vector3 origin, float time)
    {
        Vector3 distance = target - origin;
        Vector3 distanceXZ = distance;
        distanceXZ.y = 0f;

        float Sy = distance.y;
        float Sxz = distanceXZ.magnitude;

        float Vxz = Sxz / time;
        float Vy = Sy / time + 0.5f * Mathf.Abs(Physics.gravity.y) * time;

        Vector3 result = distanceXZ.normalized;
        result *= Vxz;
        result.y = Vy;

        return result;
    }

    /// <summary>
    /// Checks if target is in range e.g melee attack
    /// </summary>
    public static  bool CheckDistanceTo(Vector3 target, Vector3 pos, float range)
    {
        var dist = target - pos;
        if (dist.sqrMagnitude < range * range)
        {
            return true;
        }
        return false;
    }
    /// <summary>
    /// Checks target is between min and max range e.g melee attack jump attack
    /// </summary>
    public static bool CheckDistanceBetween(Vector3 target, Vector3 pos, float minRange, float maxRange)
    {
        var dist = target - pos;
        if (dist.sqrMagnitude < maxRange * maxRange && dist.sqrMagnitude > minRange * minRange)
        {
            return true;
        }
        return false;
    }

    /// <summary>
    /// Rotates to mouse position
    /// </summary>
    public static void RotateToMouse(Transform transform, float rotationSpeed)
    {
        Plane playerPlane = new Plane(Vector3.up, transform.position);
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        if (playerPlane.Raycast(ray, out float hitdist))
        {
            Vector3 targetPoint = ray.GetPoint(hitdist);
            Quaternion targetRotation = Quaternion.LookRotation(targetPoint - transform.position);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
    }

    /// <summary>
    /// Finds mouse position
    /// </summary>
    public static Vector3 GetMousePosition(Transform transform)
    {
        Plane playerPlane = new Plane(Vector3.up, transform.position);
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        float hitdist = 0.0f;

        if (playerPlane.Raycast(ray, out hitdist))
        {
            return ray.GetPoint(hitdist);
        }
        return Vector3.zero;
    }

    /// <summary>
    /// Changes alpha of the color
    /// </summary>
    public static T ChangeAlpha<T>(this T g, float newAlpha)
         where T : Graphic
    {
        var color = g.color;
        color.a = newAlpha;
        g.color = color;
        return g;
    }

    /// <summary>
    /// Slows down time for duration min 0-1 max
    /// </summary>
    public static IEnumerator SlowTime(float strength, float duration)
    {
        Time.timeScale = strength;
        yield return new WaitForSeconds(duration);
        Time.timeScale = 1f;
    }
}
